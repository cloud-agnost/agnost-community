import Database from '@/assets/images/database.png';
import Rapid from '@/assets/images/rapid.png';
import Realtime from '@/assets/images/realtime.png';
import {
	ApiKeys,
	Authentication,
	Awss3,
	AzureBlobStorage,
	BellRing,
	Binary,
	Cache,
	Calendar,
	ChangeLog,
	Connect,
	Database as DatabaseIcon,
	Decimal,
	Decision,
	DeviceMobile,
	Environment,
	EnvironmentVariable,
	GcpStorage,
	Integer,
	Kafka,
	LightBulb,
	LineSegments,
	MessageQueue,
	MongoDb,
	MySql,
	NpmPackage,
	Object as ObjectIcon,
	ObjectList,
	Oracle,
	PostgreSql,
	RabbitMq,
	RateLimit,
	RealTime,
	Resource,
	RichText,
	SqlServer,
	Storage,
	Team,
	Timestamp,
} from '@/components/icons';
import {
	ConnectAWS,
	ConnectAzure,
	ConnectCache,
	ConnectDatabase,
	ConnectGCP,
	ConnectQueue,
	CreateCache,
	CreateDatabase,
	CreateQueue,
	SelectResourceType,
} from '@/features/resources';
import useApplicationStore from '@/store/app/applicationStore';
import useAuthStore from '@/store/auth/authStore.ts';
import useVersionStore from '@/store/version/versionStore.ts';
import { Application, Instance, Method, SortOption, Tab } from '@/types';
import { history, translate } from '@/utils';
import {
	BracketsCurly,
	Clock,
	CurrencyDollarSimple,
	Envelope,
	FileText,
	GearSix,
	IdentificationBadge,
	LinkSimple,
	ListChecks,
	ListNumbers,
	LockSimple,
	MapPin,
	Phone,
	Plus,
	Share,
	SignOut,
	TextAa,
} from '@phosphor-icons/react';
import { BadgeColors } from 'components/Badge/Badge.tsx';
import { DropdownMenuSeparator } from 'components/Dropdown';
import { ElementType, Fragment } from 'react';
import * as z from 'zod';

export const PAGE_SIZE = 10;
export const UI_BASE_URL = window.location.origin;
export const MIN_DB_SIZE = 1;
export const MAX_DB_SIZE = 50;

export const SLIDER_IMAGES = [
	{
		text: 'Accelerate your app development journey and leave the competition in the dust with our cutting-edge platform designed for rapid innovation and unbeatable efficiency.',
		image: Rapid,
	},
	{
		text: 'Amplify your backend capabilities and seamlessly integrate, manipulate, and leverage the power of multiple databases, including MySQL, MSSQL, and PostgreSQL.',
		image: Database,
	},
	{
		text: 'Amplify your backend capabilities and seamlessly integrate, manipulate, and leverage the power of multiple databases, including MySQL, MSSQL, and PostgreSQL.',
		image: Realtime,
	},
];

export const MENU_ITEMS = [
	{
		title: 'Feedback',
		url: '/feedback',
		icon: LightBulb,
	},
	{
		title: 'Change Log',
		url: '/change-log',
		icon: ChangeLog,
	},
	{
		title: 'Docs',
		url: '/docs',
		icon: FileText,
	},
];

export const MENU_ITEMS_FOR_PROFILE_SETTINGS = [
	{
		title: translate('profileSettings.general_title'),
		href: '/profile/settings',
		icon: GearSix,
	},
	{
		title: translate('profileSettings.notifications_title'),
		href: '/profile/settings/notifications',
		icon: BellRing,
	},
	{
		title: translate('profileSettings.clusters_title'),
		href: '/profile/settings/cluster-management',
		icon: LineSegments,
	},
];

export const ORGANIZATION_MENU_ITEMS = [
	{
		name: translate('organization.menu.apps'),
		href: 'apps',
		icon: DeviceMobile,
	},
	{
		name: translate('organization.menu.resources'),
		href: 'resources',
		icon: DatabaseIcon,
	},
	{
		name: translate('organization.menu.settings'),
		href: 'settings',
		icon: GearSix,
	},
];

export const APPLICATION_SETTINGS = [
	{
		id: 'open-version',
		name: translate('application.settings.openVersion'),
		onClick: (application: Application) => {
			useApplicationStore.getState().openVersionDrawer(application);
		},
	},
	{
		id: 'edit-app',
		name: translate('application.settings.editApp'),
		onClick: (application: Application) => {
			useApplicationStore.getState().openEditAppDrawer(application);
			const searchParams = new URLSearchParams(window.location.search);
			if (!searchParams.get('t')) {
				searchParams.set('t', 'general');
				window.history.replaceState(
					null,
					'',
					`${window.location.pathname}?${searchParams.toString()}`,
				);
			}
		},
	},
	{
		id: 'add-members',
		name: translate('general.addMembers'),
		onClick: (application: Application) => {
			useApplicationStore.getState().openInviteMemberDrawer(application);
		},
	},
];

export const ORGANIZATION_SETTINGS = [
	{
		title: translate('organization.settings.general'),
		href: '/organization/:id/settings',
		icon: GearSix,
	},
	{
		title: translate('organization.settings.members.title'),
		href: '/organization/:id/settings/members',
		icon: Team,
	},
];

export const ALL_NOTIFICATIONS = [
	'org',
	'app',
	'version',
	'database',
	'model',
	'field',
	'endpoint',
	'queue',
	'cronjob',
	'cache',
	'storage',
	'resource',
	'environment',
];

export const ERROR_CODES_TO_REDIRECT_LOGIN_PAGE = [
	'invalid_session',
	'missing_access_token',
	'invalid_access_token',
	'missing_refresh_token',
	'invalid_refresh_token',
];

export const ORG_MEMBERS_SORT_OPTIONS: SortOption[] = [
	{
		name: translate('general.sortOptions.default'),
		value: 'default',
	},
	{
		name: translate('general.sortOptions.joinDate'),
		value: 'joinDate',
		sortDir: 'desc',
	},
	{
		name: translate('general.sortOptions.nameAsc'),
		value: 'name',
		sortDir: 'asc',
	},
	{
		name: translate('general.sortOptions.nameDesc'),
		value: 'name',
		sortDir: 'desc',
	},
];

export const INVITATIONS_SORT_OPTIONS: SortOption[] = [
	{
		name: translate('general.sortOptions.inviteDate'),
		value: 'createdAt',
		sortDir: 'desc',
	},
	{
		name: translate('general.sortOptions.emailAsc'),
		value: 'email',
		sortDir: 'asc',
	},
	{
		name: translate('general.sortOptions.emailDesc'),
		value: 'email',
		sortDir: 'desc',
	},
];

export const NEW_TAB_ITEMS: Omit<Tab, 'id'>[] = [
	{
		title: translate('version.databases'),
		path: 'database',
	},
	{
		title: translate('version.storage'),
		path: 'storage',
	},
	{
		title: translate('version.cache'),
		path: 'cache',
	},
	{
		title: translate('version.endpoints'),
		path: 'endpoint',
	},
	{
		title: translate('version.message_queues'),
		path: 'queue',
	},
	{
		title: translate('version.cron_jobs'),
		path: 'task',
	},
	{
		title: translate('version.middleware.default'),
		path: 'middleware',
	},
	{
		title: translate('version.settings.default'),
		path: 'settings',
	},
];

export const BADGE_COLOR_MAP: Record<string, BadgeColors> = {
	SUSPENDED: 'yellow',
	DEPLOYING: 'blue',
	ERROR: 'red',
	OK: 'green',
	GOOD: 'green',
	YES: 'green',
	NO: 'red',
	ADMIN: 'orange',
	DEVELOPER: 'purple',
	VIEWER: 'blue',
	CREATING: 'green',
	UPDATING: 'yellow',
	DELETING: 'red',
	BINDING: 'blue',
	OPTIONAL: 'yellow',
	REQUIRED: 'blue',
	ENABLED: 'green',
	DISABLED: 'red',
};

export const EDIT_APPLICATION_MENU_ITEMS = [
	{
		name: translate('application.edit.general'),
		href: '?t=general',
	},
	{
		name: translate('application.edit.members'),
		href: '?t=members',
	},
	{
		name: translate('application.edit.invitations'),
		href: '?t=invitations',
	},
];

export const TEST_ENDPOINTS_MENU_ITEMS = [
	{
		name: translate('endpoint.test.params'),
		href: '?t=params',
	},
	{
		name: translate('endpoint.test.headers'),
		href: '?t=headers',
	},
	{
		name: translate('endpoint.test.body'),
		href: '?t=body',
	},
];

export const VERSION_SETTINGS_MENU_ITEMS = [
	{
		id: 1,
		title: translate('version.settings.general'),
		path: '',
		icon: GearSix,
	},
	{
		id: 2,
		title: translate('version.settings.environment'),
		path: 'environment',
		icon: Environment,
	},
	{
		id: 4,
		title: translate('version.settings.npm_packages'),
		path: 'npm-packages',
		icon: NpmPackage,
	},
	{
		id: 5,
		title: translate('version.settings.environment_variables'),
		path: 'environment-variables',
		icon: EnvironmentVariable,
	},
	{
		id: 6,
		title: translate('version.settings.rate_limits'),
		path: 'rate-limits',
		icon: RateLimit,
	},
	{
		id: 7,
		title: translate('version.settings.authentications'),
		path: 'authentications',
		icon: Authentication,
	},
	{
		id: 8,
		title: translate('version.settings.api_keys'),
		path: 'api-keys',
		icon: ApiKeys,
	},
	{
		id: 9,
		title: translate('version.settings.real_time'),
		path: 'real-time',
		icon: RealTime,
	},
];

export const RESOURCE_TYPES = [
	{
		id: 'database',
		name: translate('version.databases'),
		icon: Resource,
	},
	{
		id: 'storage',
		name: translate('version.storage'),
		icon: Storage,
	},
	{
		id: 'cache',
		name: translate('version.cache'),
		icon: Cache,
	},
	{
		id: 'message-queue',
		name: translate('version.message_queues'),
		icon: MessageQueue,
	},
];

export const DEFAULT_RESOURCE_INSTANCES: Instance[] = [
	{
		id: 'create_new',
		name: translate('resources.create_new'),
		icon: Plus,
	},
	{
		id: 'connect_existing',
		name: translate('resources.connect_existing'),
		icon: Connect,
	},
];

export const STORAGE_TYPES: Instance[] = [
	{
		id: 'AWS S3',
		name: 'AWS S3',
		icon: Awss3,
	},
	{
		id: 'Azure Blob Storage',
		name: 'Azure Blob Storage',
		icon: AzureBlobStorage,
	},
	{
		id: 'GCP Cloud Storage',
		name: 'GCP Cloud Storage',
		icon: GcpStorage,
	},
];

export const DATABASE_TYPES: Instance[] = [
	{
		id: 'MongoDB',
		name: 'MongoDB',
		icon: MongoDb,
	},
	{
		id: 'MySQL',
		name: 'MySQL',
		icon: MySql,
	},
	{
		id: 'PostgreSQL',
		name: 'PostgreSQL',
		icon: PostgreSql,
	},
	{
		id: 'Oracle',
		name: 'Oracle',
		icon: Oracle,
		isConnectOnly: true,
	},
	{
		id: 'SQL Server',
		name: 'SQL Server',
		icon: SqlServer,
		isConnectOnly: true,
	},
];

export const DATABASE_ICON_MAP: Record<string, ElementType> = {
	MongoDB: MongoDb,
	MySQL: MySql,
	PostgreSQL: PostgreSql,
	Oracle: Oracle,
	'SQL Server': SqlServer,
};
export const QUEUE_ICON_MAP: Record<string, ElementType> = {
	RabbitMQ: RabbitMq,
	Kafka: Kafka,
};
export const QUEUE_TYPES: Instance[] = [
	{
		id: 'RabbitMQ',
		name: 'RabbitMQ',
		icon: RabbitMq,
	},
	{
		id: 'Kafka',
		name: 'Kafka',
		icon: Kafka,
	},
];

export const STORAGE_ICON_MAP: Record<string, ElementType> = {
	'AWS S3': Awss3,
	'Azure Blob Storage': AzureBlobStorage,
	'GCP Cloud Storage': GcpStorage,
	MinIO: Storage,
};

export const CREATE_RESOURCES_ELEMENTS = [
	{
		step: 1,
		title: translate('resources.select'),
		CurrentResourceElement: SelectResourceType,
	},
	{
		step: 2,
		name: translate('version.databases'),
		type: translate('resources.create_new'),
		CurrentResourceElement: CreateDatabase,
	},
	{
		step: 2,
		name: translate('version.databases'),
		type: translate('resources.connect_existing'),
		CurrentResourceElement: ConnectDatabase,
	},
	{
		step: 2,
		name: translate('version.storage'),
		type: 'AWS S3',
		CurrentResourceElement: ConnectAWS,
	},
	{
		step: 2,
		name: translate('version.storage'),
		type: 'Azure Blob Storage',
		CurrentResourceElement: ConnectAzure,
	},
	{
		step: 2,
		name: translate('version.storage'),
		type: 'GCP Cloud Storage',
		CurrentResourceElement: ConnectGCP,
	},

	{
		step: 2,
		name: translate('version.cache'),
		type: translate('resources.create_new'),
		CurrentResourceElement: CreateCache,
	},
	{
		step: 2,
		name: translate('version.cache'),
		type: translate('resources.connect_existing'),
		CurrentResourceElement: ConnectCache,
	},
	{
		step: 2,
		name: translate('version.message_queues'),
		type: translate('resources.create_new'),
		CurrentResourceElement: CreateQueue,
	},
	{
		step: 2,
		name: translate('version.message_queues'),
		type: translate('resources.connect_existing'),
		CurrentResourceElement: ConnectQueue,
	},
];

export const VERSION_DROPDOWN_ITEM = [
	{
		title: () => translate('version.open_version'),
		active: () => false,
		action: () => {
			const { application, openVersionDrawer } = useApplicationStore.getState();
			if (!application) return;
			openVersionDrawer(application);
		},
		disabled: false,
		after: Fragment,
	},
	{
		title: () => translate('version.create_a_copy'),
		active: () => false,
		action: async () => {
			useVersionStore.getState().setCreateCopyVersionDrawerIsOpen(true);
		},
		after: Fragment,
		disabled: false,
	},
	{
		title: () => translate('version.merge'),
		active: () => false,
		action: () => {
			// TODO: implement
		},
		disabled: true,
		after: DropdownMenuSeparator,
	},
	{
		title: () => translate('version.export'),
		active: () => false,
		action: () => {
			// TODO: implement
		},
		disabled: true,
		after: Fragment,
	},
	{
		title: () => translate('version.import'),
		active: () => false,
		action: () => {
			// TODO: implement
		},
		disabled: true,
		after: DropdownMenuSeparator,
	},
	{
		title: () =>
			useVersionStore.getState().version?.readOnly
				? translate('version.mark_read_write')
				: translate('version.mark_read_only'),
		active: () => false,
		action: () => {
			const { updateVersionProperties, version } = useVersionStore.getState();
			if (!version) return;
			updateVersionProperties({
				orgId: version.orgId,
				versionId: version._id,
				appId: version.appId,
				readOnly: !version?.readOnly,
			});
		},
		after: Fragment,
		disabled: false,
	},
	{
		title: () =>
			useVersionStore.getState().version?.private
				? translate('version.set_public')
				: translate('version.set_private'),
		active: () => false,
		action: () => {
			const { updateVersionProperties, version } = useVersionStore.getState();
			if (!version) return;
			updateVersionProperties({
				orgId: version.orgId,
				versionId: version._id,
				appId: version.appId,
				private: !version?.private,
			});
		},
		after: Fragment,
		disabled: useVersionStore.getState().version?.master,
	},
	{
		title: () => translate('version.settings.default'),
		active: () =>
			history.location?.pathname ===
			`${useVersionStore.getState().getVersionDashboardPath()}/settings`,
		action: () => {
			const versionHomePath = useVersionStore.getState().getVersionDashboardPath('/settings');
			history.navigate?.(versionHomePath);
		},
		disabled: false,
		after: DropdownMenuSeparator,
	},
	{
		title: () => translate('version.delete'),
		active: () => false,
		after: Fragment,
		action: () => {
			// TODO: implement
		},
		disabled: false,
	},
];

/**
 * @type APIKeyTypes
 */
export const ENDPOINT_ACCESS_PROPERTIES = [
	'no-access',
	'full-access',
	'custom-allowed',
	'custom-excluded',
] as const;

/**
 * @type AllAndSpecified
 */
export const AUTHORIZATION_OPTIONS = ['all', 'specified'] as const;

export const RABBITMQ_CONNECTION_TYPES = ['url', 'object'] as const;
export const RABBITMQ_CONNECTION_SCHEMES = ['amqp', 'amqps'] as const;
export const KAFKA_CONNECTION_SCHEMES = ['simple', 'ssl', 'sasl'] as const;
export const KAFKA_SASL_MECHANISM = ['plain', 'scram-sha-256', 'scram-sha-512'] as const;
export const MONGODB_CONNECTION_FORMATS = ['mongodb', 'mongodb+srv'] as const;
export const ADD_API_KEYS_MENU_ITEMS = [
	{
		name: translate('application.edit.general'),
		href: '?t=general',
	},
	{
		name: translate('version.api_key.allowed_domains'),
		href: '?t=allowed-domains',
	},
	{
		name: translate('version.api_key.allowed_ips'),
		href: '?t=allowed-ips',
	},
];

export const ENDPOINT_OPTIONS: SortOption[] = [
	{
		name: translate('general.sortOptions.default'),
		value: 'createdAt',
		sortDir: 'desc',
	},
	{
		name: translate('general.sortOptions.nameAsc'),
		value: 'name',
		sortDir: 'asc',
	},
	{
		name: translate('general.sortOptions.nameDesc'),
		value: 'name',
		sortDir: 'desc',
	},
];

export const ALL_HTTP_METHODS: Method[] = ['GET', 'POST', 'PUT', 'DELETE'];

export const HTTP_METHOD_BADGE_MAP: Record<string, BadgeColors> = {
	GET: 'blue',
	POST: 'green',
	PUT: 'yellow',
	DELETE: 'red',
};
export const INSTANCE_PORT_MAP: Record<string, string> = {
	PostgreSQL: '5432',
	MySQL: '3306',
	'SQL Server': '1433',
	MongoDB: '27017',
	Oracle: '1521',
	Redis: '6379',
};
export const ENDPOINT_METHOD_TEXT_COLOR: Record<string, string> = {
	GET: 'text-elements-blue',
	POST: 'text-elements-green',
	PUT: 'text-elements-yellow',
	DELETE: 'text-elements-red',
};
export const ENDPOINT_METHOD_BG_COLOR: Record<string, string> = {
	GET: 'bg-elements-strong-blue',
	POST: 'bg-elements-strong-green',
	PUT: 'bg-elements-strong-yellow',
	DELETE: 'bg-elements-strong-red',
};

export const ENDPOINT_RESPONSE_TABS = [
	{
		id: 'body',
		name: translate('endpoint.test.body'),
	},
	{
		id: 'cookies',
		name: translate('endpoint.test.cookies'),
	},
	{
		id: 'headers',
		name: translate('endpoint.test.headers'),
	},
	{
		id: 'console',
		name: translate('endpoint.test.console_logs'),
	},
];

export const NAME_SCHEMA = z
	.string({
		required_error: translate('forms.required', {
			label: translate('general.name'),
		}),
	})
	.min(2, translate('forms.min2.error', { label: translate('general.name') }))
	.max(64, translate('forms.max64.error', { label: translate('general.name') }))
	.regex(/^[a-zA-Z0-9_]*$/, {
		message: translate('forms.alphanumeric', { label: translate('general.name') }),
	})
	.trim()
	.refine(
		(value) => value.trim().length > 0,
		translate('forms.required', {
			label: translate('general.name'),
		}),
	);

export const fieldSchema = z
	.string()
	.min(2, translate('forms.min2.error', { label: translate('general.field') }))
	.max(64, translate('forms.max64.error', { label: translate('general.field') }))
	.regex(/^[a-zA-Z0-9_]*$/, {
		message: translate('forms.alphanumeric', { label: translate('general.field') }),
	})
	.or(z.literal(''));

export const TIMESTAMPS_SCHEMA = z
	.object({
		enabled: z.boolean(),
		createdAt: fieldSchema,
		updatedAt: fieldSchema,
	})
	.superRefine((arg, ctx) => {
		if (arg.enabled) {
			Object.entries(arg).forEach(([key, value]) => {
				if (key !== 'enabled' && typeof value === 'string' && value.length === 0) {
					ctx.addIssue({
						code: z.ZodIssueCode.custom,
						message: translate('forms.required', {
							label: translate('general.field'),
						}),
						path: [key],
					});
				}
			});
		}
	});

export const FIELD_ICON_MAP: Record<string, ElementType> = {
	text: TextAa,
	email: Envelope,
	link: LinkSimple,
	'encrypted-text': LockSimple,
	phone: Phone,
	'rich-text': RichText,
	boolean: Decision,
	integer: Integer,
	decimal: Decimal,
	monetary: CurrencyDollarSimple,
	datetime: Timestamp,
	date: Calendar,
	time: Clock,
	enum: ListChecks,
	'geo-point': MapPin,
	binary: Binary,
	json: BracketsCurly,
	reference: Share,
	'basic-values-list': ListNumbers,
	object: ObjectIcon,
	'object-list': ObjectList,
	id: IdentificationBadge,
};

/**
 * @type ReferenceAction
 */
export const REFERENCE_FIELD_ACTION = ['CASCADE', 'NO ACTION', 'SET NULL', 'SET DEFAULT'] as const;

export const MAX_LENGTHS: Record<string, number> = {
	'encrypted-text': 50,
	decimal: 10,
	enum: 1000,
	text: 10240,
};

export const HEADER_USER_DROPDOWN = [
	{
		iconClassName: 'text-lg',
		title: translate('general.account_settings'),
		url: '/profile/settings',
		Icon: GearSix,
		action: undefined,
		beforeHasSeparator: false,
	},
	{
		iconClassName: 'text-lg',
		title: translate('profileSettings.clusters_title'),
		url: '/profile/settings/cluster-management',
		Icon: LineSegments,
		action: undefined,
		beforeHasSeparator: false,
	},
	{
		iconClassName: 'text-lg',
		title: translate('general.logout'),
		url: undefined,
		Icon: SignOut,
		action: () => {
			useAuthStore.getState().logout();
		},
		beforeHasSeparator: true,
	},
];

export const POSTGRES_RESERVED_WORDS = [
	'all',
	'analyse',
	'analyze',
	'and',
	'any',
	'array',
	'as',
	'asc',
	'asymmetric',
	'authorization',
	'binary',
	'both',
	'case',
	'cast',
	'check',
	'collate',
	'collation',
	'column',
	'concurrently',
	'constraint',
	'create',
	'cross',
	'current_catalog',
	'current_date',
	'current_role',
	'current_schema',
	'current_time',
	'current_timestamp',
	'current_user',
	'default',
	'deferrable',
	'desc',
	'distinct',
	'do',
	'else',
	'end',
	'except',
	'false',
	'fetch',
	'for',
	'foreign',
	'freeze',
	'from',
	'full',
	'grant',
	'group',
	'having',
	'ilike',
	'in',
	'initially',
	'inner',
	'intersect',
	'into',
	'is',
	'isnull',
	'join',
	'lateral',
	'leading',
	'left',
	'like',
	'limit',
	'localtime',
	'localtimestamp',
	'natural',
	'not',
	'notnull',
	'null',
	'offset',
	'on',
	'only',
	'or',
	'order',
	'outer',
	'overlaps',
	'placing',
	'primary',
	'references',
	'returning',
	'right',
	'select',
	'session_user',
	'similar',
	'some',
	'symmetric',
	'table',
	'tablesample',
	'then',
	'to',
	'trailing',
	'true',
	'union',
	'unique',
	'user',
	'using',
	'variadic',
	'verbose',
	'when',
	'where',
	'window',
	'with',
];

export const MYSQL_RESERVED_WORDS = [
	'accessible',
	'account',
	'action',
	'active',
	'add',
	'admin',
	'after',
	'against',
	'aggregate',
	'algorithm',
	'all',
	'alter',
	'always',
	'analyse',
	'analyze',
	'and',
	'any',
	'array',
	'as',
	'asc',
	'ascii',
	'asensitive',
	'at',
	'attribute',
	'authentication',
	'autoextend_size',
	'auto_increment',
	'avg',
	'avg_row_length',
	'backup',
	'before',
	'begin',
	'between',
	'bigint',
	'binary',
	'binlog',
	'bit',
	'blob',
	'block',
	'bool',
	'boolean',
	'both',
	'btree',
	'buckets',
	'bulk',
	'by',
	'byte',
	'cache',
	'call',
	'cascade',
	'cascaded',
	'case',
	'catalog_name',
	'chain',
	'challenge_response',
	'change',
	'changed',
	'channel',
	'char',
	'character',
	'charset',
	'check',
	'checksum',
	'cipher',
	'class_origin',
	'client',
	'clone',
	'close',
	'coalesce',
	'code',
	'collate',
	'collation',
	'column',
	'columns',
	'column_format',
	'column_name',
	'comment',
	'commit',
	'committed',
	'compact',
	'completion',
	'component',
	'compressed',
	'compression',
	'concurrent',
	'condition',
	'connection',
	'consistent',
	'constraint',
	'constraint_catalog',
	'constraint_name',
	'constraint_schema',
	'contains',
	'context',
	'continue',
	'convert',
	'cpu',
	'create',
	'cross',
	'cube',
	'cume_dist',
	'current',
	'current_date',
	'current_time',
	'current_timestamp',
	'current_user',
	'cursor',
	'cursor_name',
	'data',
	'database',
	'databases',
	'datafile',
	'date',
	'datetime',
	'day',
	'day_hour',
	'day_microsecond',
	'day_minute',
	'day_second',
	'deallocate',
	'dec',
	'decimal',
	'declare',
	'default',
	'default_auth',
	'definer',
	'definition',
	'delayed',
	'delay_key_write',
	'delete',
	'dense_rank',
	'desc',
	'describe',
	'description',
	'des_key_file',
	'deterministic',
	'diagnostics',
	'directory',
	'disable',
	'discard',
	'disk',
	'distinct',
	'distinctrow',
	'div',
	'do',
	'double',
	'drop',
	'dual',
	'dumpfile',
	'duplicate',
	'dynamic',
	'each',
	'else',
	'elseif',
	'empty',
	'enable',
	'enclosed',
	'encryption',
	'end',
	'ends',
	'enforced',
	'engine',
	'engines',
	'engine_attribute',
	'enum',
	'error',
	'errors',
	'escape',
	'escaped',
	'event',
	'events',
	'every',
	'except',
	'exchange',
	'exclude',
	'execute',
	'exists',
	'exit',
	'expansion',
	'expire',
	'explain',
	'export',
	'extended',
	'extent_size',
	'factor',
	'failed_login_attempts',
	'false',
	'fast',
	'faults',
	'fetch',
	'fields',
	'file',
	'file_block_size',
	'filter',
	'finish',
	'first',
	'first_value',
	'fixed',
	'float',
	'float4',
	'float8',
	'flush',
	'following',
	'follows',
	'for',
	'force',
	'foreign',
	'format',
	'found',
	'from',
	'full',
	'fulltext',
	'function',
	'general',
	'generate',
	'generated',
	'geomcollection',
	'geometry',
	'geometrycollection',
	'get',
	'get_format',
	'get_master_public_key',
	'get_source_public_key',
	'global',
	'grant',
	'grants',
	'group',
	'grouping',
	'groups',
	'group_replication',
	'gtid_only',
	'handler',
	'hash',
	'having',
	'help',
	'high_priority',
	'histogram',
	'history',
	'host',
	'hosts',
	'hour',
	'hour_microsecond',
	'hour_minute',
	'hour_second',
	'identified',
	'if',
	'ignore',
	'ignore_server_ids',
	'import',
	'in',
	'inactive',
	'index',
	'indexes',
	'infile',
	'initial',
	'initial_size',
	'initiate',
	'inner',
	'inout',
	'insensitive',
	'insert',
	'insert_method',
	'install',
	'instance',
	'int',
	'int1',
	'int2',
	'int3',
	'int4',
	'int8',
	'integer',
	'intersect',
	'interval',
	'into',
	'invisible',
	'invoker',
	'io',
	'io_after_gtids',
	'io_before_gtids',
	'io_thread',
	'ipc',
	'is',
	'isolation',
	'issuer',
	'iterate',
	'join',
	'json',
	'json_table',
	'json_value',
	'key',
	'keyring',
	'keys',
	'key_block_size',
	'kill',
	'lag',
	'language',
	'last',
	'last_value',
	'lateral',
	'lead',
	'leading',
	'leave',
	'leaves',
	'left',
	'less',
	'level',
	'like',
	'limit',
	'linear',
	'lines',
	'linestring',
	'list',
	'load',
	'local',
	'localtime',
	'localtimestamp',
	'lock',
	'locked',
	'locks',
	'logfile',
	'logs',
	'long',
	'longblob',
	'longtext',
	'loop',
	'low_priority',
	'master',
	'master_auto_position',
	'master_bind',
	'master_compression_algorithms',
	'master_connect_retry',
	'master_delay',
	'master_heartbeat_period',
	'master_host',
	'master_log_file',
	'master_log_pos',
	'master_password',
	'master_port',
	'master_public_key_path',
	'master_retry_count',
	'master_server_id',
	'master_ssl',
	'master_ssl_ca',
	'master_ssl_capath',
	'master_ssl_cert',
	'master_ssl_cipher',
	'master_ssl_crl',
	'master_ssl_crlpath',
	'master_ssl_key',
	'master_ssl_verify_server_cert',
	'master_tls_ciphersuites',
	'master_tls_version',
	'master_user',
	'master_zstd_compression_level',
	'match',
	'maxvalue',
	'max_connections_per_hour',
	'max_queries_per_hour',
	'max_rows',
	'max_size',
	'max_updates_per_hour',
	'max_user_connections',
	'medium',
	'mediumblob',
	'mediumint',
	'mediumtext',
	'member',
	'memory',
	'merge',
	'message_text',
	'microsecond',
	'middleint',
	'migrate',
	'minute',
	'minute_microsecond',
	'minute_second',
	'min_rows',
	'mod',
	'mode',
	'modifies',
	'modify',
	'month',
	'multilinestring',
	'multipoint',
	'multipolygon',
	'mutex',
	'mysql_errno',
	'name',
	'names',
	'national',
	'natural',
	'nchar',
	'ndb',
	'ndbcluster',
	'nested',
	'network_namespace',
	'never',
	'new',
	'next',
	'no',
	'nodegroup',
	'none',
	'not',
	'nowait',
	'no_wait',
	'no_write_to_binlog',
	'nth_value',
	'ntile',
	'null',
	'nulls',
	'number',
	'numeric',
	'nvarchar',
	'of',
	'off',
	'offset',
	'oj',
	'old',
	'on',
	'one',
	'only',
	'open',
	'optimize',
	'optimizer_costs',
	'option',
	'optional',
	'optionally',
	'options',
	'or',
	'order',
	'ordinality',
	'organization',
	'others',
	'out',
	'outer',
	'outfile',
	'over',
	'owner',
	'pack_keys',
	'page',
	'parser',
	'partial',
	'partition',
	'partitioning',
	'partitions',
	'password',
	'password_lock_time',
	'path',
	'percent_rank',
	'persist',
	'persist_only',
	'phase',
	'plugin',
	'plugins',
	'plugin_dir',
	'point',
	'polygon',
	'port',
	'precedes',
	'preceding',
	'precision',
	'prepare',
	'preserve',
	'prev',
	'primary',
	'privileges',
	'privilege_checks_user',
	'procedure',
	'process',
	'processlist',
	'profile',
	'profiles',
	'proxy',
	'purge',
	'quarter',
	'query',
	'quick',
	'random',
	'range',
	'rank',
	'read',
	'reads',
	'read_only',
	'read_write',
	'real',
	'rebuild',
	'recover',
	'recursive',
	'redofile',
	'redo_buffer_size',
	'redundant',
	'reference',
	'references',
	'regexp',
	'registration',
	'relay',
	'relaylog',
	'relay_log_file',
	'relay_log_pos',
	'relay_thread',
	'release',
	'reload',
	'remote',
	'remove',
	'rename',
	'reorganize',
	'repair',
	'repeat',
	'repeatable',
	'replace',
	'replica',
	'replicas',
	'replicate_do_db',
	'replicate_do_table',
	'replicate_ignore_db',
	'replicate_ignore_table',
	'replicate_rewrite_db',
	'replicate_wild_do_table',
	'replicate_wild_ignore_table',
	'replication',
	'require',
	'require_row_format',
	'reset',
	'resignal',
	'resource',
	'respect',
	'restart',
	'restore',
	'restrict',
	'resume',
	'retain',
	'return',
	'returned_sqlstate',
	'returning',
	'returns',
	'reuse',
	'reverse',
	'revoke',
	'right',
	'rlike',
	'role',
	'rollback',
	'rollup',
	'rotate',
	'routine',
	'row',
	'rows',
	'row_count',
	'row_format',
	'row_number',
	'rtree',
	'savepoint',
	'schedule',
	'schema',
	'schemas',
	'schema_name',
	'second',
	'secondary',
	'secondary_engine',
	'secondary_engine_attribute',
	'secondary_load',
	'secondary_unload',
	'second_microsecond',
	'security',
	'select',
	'sensitive',
	'separator',
	'serial',
	'serializable',
	'server',
	'session',
	'set',
	'share',
	'show',
	'shutdown',
	'signal',
	'signed',
	'simple',
	'skip',
	'slave',
	'slow',
	'smallint',
	'snapshot',
	'socket',
	'some',
	'soname',
	'sounds',
	'source',
	'source_auto_position',
	'source_bind',
	'source_compression_algorithms',
	'source_connect_retry',
	'source_delay',
	'source_heartbeat_period',
	'source_host',
	'source_log_file',
	'source_log_pos',
	'source_password',
	'source_port',
	'source_public_key_path',
	'source_retry_count',
	'source_ssl',
	'source_ssl_ca',
	'source_ssl_capath',
	'source_ssl_cert',
	'source_ssl_cipher',
	'source_ssl_crl',
	'source_ssl_crlpath',
	'source_ssl_key',
	'source_ssl_verify_server_cert',
	'source_tls_ciphersuites',
	'source_tls_version',
	'source_user',
	'source_zstd_compression_level',
	'spatial',
	'specific',
	'sql',
	'sqlexception',
	'sqlstate',
	'sqlwarning',
	'sql_after_gtids',
	'sql_after_mts_gaps',
	'sql_before_gtids',
	'sql_big_result',
	'sql_buffer_result',
	'sql_cache',
	'sql_calc_found_rows',
	'sql_no_cache',
	'sql_small_result',
	'sql_thread',
	'sql_tsi_day',
	'sql_tsi_hour',
	'sql_tsi_minute',
	'sql_tsi_month',
	'sql_tsi_quarter',
	'sql_tsi_second',
	'sql_tsi_week',
	'sql_tsi_year',
	'srid',
	'ssl',
	'stacked',
	'start',
	'starting',
	'starts',
	'stats_auto_recalc',
	'stats_persistent',
	'stats_sample_pages',
	'status',
	'stop',
	'storage',
	'stored',
	'straight_join',
	'stream',
	'string',
	'subclass_origin',
	'subject',
	'subpartition',
	'subpartitions',
	'super',
	'suspend',
	'swaps',
	'switches',
	'system',
	'table',
	'tables',
	'tablespace',
	'table_checksum',
	'table_name',
	'temporary',
	'temptable',
	'terminated',
	'text',
	'than',
	'then',
	'thread_priority',
	'ties',
	'time',
	'timestamp',
	'timestampadd',
	'timestampdiff',
	'tinyblob',
	'tinyint',
	'tinytext',
	'tls',
	'to',
	'trailing',
	'transaction',
	'trigger',
	'triggers',
	'true',
	'truncate',
	'type',
	'types',
	'unbounded',
	'uncommitted',
	'undefined',
	'undo',
	'undofile',
	'undo_buffer_size',
	'unicode',
	'uninstall',
	'union',
	'unique',
	'unknown',
	'unlock',
	'unregister',
	'unsigned',
	'until',
	'update',
	'upgrade',
	'url',
	'usage',
	'use',
	'user',
	'user_resources',
	'use_frm',
	'using',
	'utc_date',
	'utc_time',
	'utc_timestamp',
	'validation',
	'value',
	'values',
	'varbinary',
	'varchar',
	'varcharacter',
	'variables',
	'varying',
	'vcpu',
	'view',
	'virtual',
	'visible',
	'wait',
	'warnings',
	'week',
	'weight_string',
	'when',
	'where',
	'while',
	'window',
	'with',
	'without',
	'work',
	'wrapper',
	'write',
	'x509',
	'xa',
	'xid',
	'xml',
	'xor',
	'year',
	'year_month',
	'zerofill',
	'zone',
];

export const SQL_SERVER_RESERVED_WORDS = [
	'add',
	'external',
	'procedure',
	'all',
	'fetch',
	'public',
	'alter',
	'file',
	'raiserror',
	'and',
	'fillfactor',
	'read',
	'any',
	'for',
	'readtext',
	'as',
	'foreign',
	'reconfigure',
	'asc',
	'freetext',
	'references',
	'authorization',
	'freetexttable',
	'replication',
	'backup',
	'from',
	'restore',
	'begin',
	'full',
	'restrict',
	'between',
	'function',
	'return',
	'break',
	'goto',
	'revert',
	'browse',
	'grant',
	'revoke',
	'bulk',
	'group',
	'right',
	'by',
	'having',
	'rollback',
	'cascade',
	'holdlock',
	'rowcount',
	'case',
	'identity',
	'rowguidcol',
	'check',
	'identity_insert',
	'rule',
	'checkpoint',
	'identitycol',
	'save',
	'close',
	'if',
	'schema',
	'clustered',
	'in',
	'securityaudit',
	'coalesce',
	'index',
	'select',
	'collate',
	'inner',
	'semantickeyphrasetable',
	'column',
	'insert',
	'semanticsimilaritydetailstable',
	'commit',
	'intersect',
	'semanticsimilaritytable',
	'compute',
	'into',
	'session_user',
	'constraint',
	'is',
	'set',
	'contains',
	'join',
	'setuser',
	'containstable',
	'key',
	'shutdown',
	'continue',
	'kill',
	'some',
	'convert',
	'left',
	'statistics',
	'create',
	'like',
	'system_user',
	'cross',
	'lineno',
	'table',
	'current',
	'load',
	'tablesample',
	'current_date',
	'merge',
	'textsize',
	'current_time',
	'national',
	'then',
	'current_timestamp',
	'nocheck',
	'to',
	'current_user',
	'nonclustered',
	'top',
	'cursor',
	'not',
	'tran',
	'database',
	'null',
	'transaction',
	'dbcc',
	'nullif',
	'trigger',
	'deallocate',
	'of',
	'truncate',
	'declare',
	'off',
	'try_convert',
	'default',
	'offsets',
	'tsequal',
	'delete',
	'on',
	'union',
	'deny',
	'open',
	'unique',
	'desc',
	'opendatasource',
	'unpivot',
	'disk',
	'openquery',
	'update',
	'distinct',
	'openrowset',
	'updatetext',
	'distributed',
	'openxml',
	'use',
	'double',
	'option',
	'user',
	'drop',
	'or',
	'values',
	'dump',
	'order',
	'varying',
	'else',
	'outer',
	'view',
	'end',
	'over',
	'waitfor',
	'errlvl',
	'percent',
	'when',
	'escape',
	'pivot',
	'where',
	'except',
	'plan',
	'while',
	'exec',
	'precision',
	'with',
	'execute',
	'primary',
	'within group',
	'exists',
	'print',
	'writetext',
	'exit',
	'proc',
	'label',
	'absolute',
	'overlaps',
	'action',
	'pad',
	'ada',
	'partial',
	'pascal',
	'extract',
	'position',
	'allocate',
	'false',
	'prepare',
	'first',
	'preserve',
	'float',
	'are',
	'prior',
	'privileges',
	'fortran',
	'assertion',
	'found',
	'at',
	'real',
	'avg',
	'get',
	'global',
	'relative',
	'go',
	'bit',
	'bit_length',
	'both',
	'rows',
	'hour',
	'cascaded',
	'scroll',
	'immediate',
	'second',
	'cast',
	'section',
	'catalog',
	'include',
	'char',
	'session',
	'char_length',
	'indicator',
	'character',
	'initially',
	'character_length',
	'size',
	'input',
	'smallint',
	'insensitive',
	'space',
	'int',
	'sql',
	'collation',
	'integer',
	'sqlca',
	'sqlcode',
	'interval',
	'sqlerror',
	'connect',
	'sqlstate',
	'connection',
	'sqlwarning',
	'isolation',
	'substring',
	'constraints',
	'sum',
	'language',
	'corresponding',
	'last',
	'temporary',
	'count',
	'leading',
	'time',
	'level',
	'timestamp',
	'timezone_hour',
	'local',
	'timezone_minute',
	'lower',
	'match',
	'trailing',
	'max',
	'min',
	'translate',
	'date',
	'minute',
	'translation',
	'day',
	'module',
	'trim',
	'month',
	'true',
	'dec',
	'names',
	'decimal',
	'natural',
	'unknown',
	'nchar',
	'deferrable',
	'next',
	'upper',
	'deferred',
	'no',
	'usage',
	'none',
	'using',
	'describe',
	'value',
	'descriptor',
	'diagnostics',
	'numeric',
	'varchar',
	'disconnect',
	'octet_length',
	'domain',
	'only',
	'whenever',
	'work',
	'end-exec',
	'write',
	'year',
	'output',
	'zone',
	'exception',
	'host',
	'release',
	'admin',
	'ignore',
	'result',
	'after',
	'returns',
	'aggregate',
	'role',
	'alias',
	'initialize',
	'rollup',
	'routine',
	'inout',
	'row',
	'array',
	'asensitive',
	'savepoint',
	'asymmetric',
	'intersection',
	'scope',
	'search',
	'atomic',
	'before',
	'iterate',
	'binary',
	'sensitive',
	'large',
	'sequence',
	'blob',
	'boolean',
	'lateral',
	'sets',
	'similar',
	'breadth',
	'less',
	'call',
	'called',
	'like_regex',
	'cardinality',
	'limit',
	'specific',
	'ln',
	'specifictype',
	'localtime',
	'sqlexception',
	'localtimestamp',
	'locator',
	'class',
	'map',
	'start',
	'clob',
	'state',
	'member',
	'statement',
	'collect',
	'method',
	'static',
	'completion',
	'stddev_pop',
	'condition',
	'mod',
	'stddev_samp',
	'modifies',
	'structure',
	'modify',
	'submultiset',
	'substring_regex',
	'constructor',
	'symmetric',
	'corr',
	'multiset',
	'system',
	'covar_pop',
	'terminate',
	'covar_samp',
	'than',
	'cube',
	'nclob',
	'cume_dist',
	'new',
	'current_catalog',
	'current_default_transform_group',
	'current_path',
	'current_role',
	'normalize',
	'translate_regex',
	'current_schema',
	'current_transform_group_for_type',
	'object',
	'treat',
	'cycle',
	'occurrences_regex',
	'data',
	'old',
	'uescape',
	'under',
	'operation',
	'ordinality',
	'unnest',
	'out',
	'overlay',
	'depth',
	'var_pop',
	'deref',
	'parameter',
	'var_samp',
	'parameters',
	'variable',
	'destroy',
	'partition',
	'destructor',
	'path',
	'width_bucket',
	'deterministic',
	'postfix',
	'without',
	'dictionary',
	'prefix',
	'window',
	'preorder',
	'within',
	'percent_rank',
	'dynamic',
	'percentile_cont',
	'xmlagg',
	'each',
	'percentile_disc',
	'xmlattributes',
	'element',
	'position_regex',
	'xmlbinary',
	'xmlcast',
	'equals',
	'xmlcomment',
	'every',
	'xmlconcat',
	'range',
	'xmldocument',
	'reads',
	'xmlelement',
	'filter',
	'xmlexists',
	'recursive',
	'xmlforest',
	'ref',
	'xmliterate',
	'referencing',
	'xmlnamespaces',
	'free',
	'regr_avgx',
	'xmlparse',
	'fulltexttable',
	'regr_avgy',
	'xmlpi',
	'fusion',
	'regr_count',
	'xmlquery',
	'general',
	'regr_intercept',
	'xmlserialize',
	'regr_r2',
	'xmltable',
	'regr_slope',
	'xmltext',
	'regr_sxx',
	'xmlvalidate',
	'grouping',
	'regr_sxy',
	'hold',
	'regr_syy',
];
